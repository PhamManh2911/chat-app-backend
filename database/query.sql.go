// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "Message" ("value", "updatedAt", "chatId", "userToChatId") VALUES ($1, $2, $3, $4)
RETURNING id, "createdAt", "updatedAt", value, "chatId", "userToChatId"
`

type CreateMessageParams struct {
	Value        string
	UpdatedAt    pgtype.Timestamp
	ChatId       int32
	UserToChatId int32
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.Value,
		arg.UpdatedAt,
		arg.ChatId,
		arg.UserToChatId,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Value,
		&i.ChatId,
		&i.UserToChatId,
	)
	return i, err
}

const getChat = `-- name: GetChat :one
SELECT id, name, "createdAt", "updatedAt", "numberOfMember" FROM "Chat" WHERE id=$1 LIMIT 1
`

func (q *Queries) GetChat(ctx context.Context, id int32) (Chat, error) {
	row := q.db.QueryRow(ctx, getChat, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NumberOfMember,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, "createdAt", "updatedAt", "firstName", "lastName", nickname, name, picture, email, "lastOnline" FROM "User" WHERE email=$1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Name,
		&i.Picture,
		&i.Email,
		&i.LastOnline,
	)
	return i, err
}

const getUserToChat = `-- name: GetUserToChat :one
SELECT "id" FROM "UserToChat" WHERE "userId"=$1 AND "chatId"=$2 LIMIT 1
`

type GetUserToChatParams struct {
	UserId int32
	ChatId int32
}

func (q *Queries) GetUserToChat(ctx context.Context, arg GetUserToChatParams) (int32, error) {
	row := q.db.QueryRow(ctx, getUserToChat, arg.UserId, arg.ChatId)
	var id int32
	err := row.Scan(&id)
	return id, err
}
