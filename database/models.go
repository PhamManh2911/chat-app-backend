// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserToChatRole string

const (
	UserToChatRoleCREATOR   UserToChatRole = "CREATOR"
	UserToChatRoleMODERATOR UserToChatRole = "MODERATOR"
	UserToChatRoleMEMBER    UserToChatRole = "MEMBER"
)

func (e *UserToChatRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserToChatRole(s)
	case string:
		*e = UserToChatRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserToChatRole: %T", src)
	}
	return nil
}

type NullUserToChatRole struct {
	UserToChatRole UserToChatRole
	Valid          bool // Valid is true if UserToChatRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserToChatRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserToChatRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserToChatRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserToChatRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserToChatRole), nil
}

type Chat struct {
	ID             int32
	Name           pgtype.Text
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	NumberOfMember int32
}

type Message struct {
	ID           int32
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
	Value        string
	ChatId       int32
	UserToChatId int32
}

type User struct {
	ID         int32
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	FirstName  pgtype.Text
	LastName   pgtype.Text
	Nickname   pgtype.Text
	Name       string
	Picture    pgtype.Text
	Email      string
	LastOnline pgtype.Timestamp
}

type UserToChat struct {
	ID          int32
	CreatedAt   pgtype.Timestamp
	LastSeen    pgtype.Timestamp
	IsConnected bool
	Nickname    pgtype.Text
	Role        UserToChatRole
	UserId      int32
	ChatId      int32
}
